HISTÓRIA DO ECMASCRIPT-6
------------------------
- Criado em 1995 por Brendan Eich (Netscape)


- ECMA: European Computer Manufactorer Association
    - Especificação de como as principais partes da linguagem JavaScript devem ser implementadas pelos "browsers"

    - ES5 foi a versão padronizada em 2009 e a mais significativa

    - ES6 foi desenvolvida em 2015 e tem sido muito utilizada:
        - Os browsers estavam atrasados em relação ao avanço da linguagem, por isso era necessário utilizar "transpilers" para traduzir o ES6 para o ES5



DECLARAÇÃO DE VARIÁVEIS - FUNDAMENTOS DO ES6
--------------------------------------------
- Operadores de declaração de variáveis:
    - Escopos global, função e bloco

    - var: foi descontinuado, mas ainda existe para manter aplicações antigas. O tipo var é regido por uma antiga regra de hierarquia de escopos

    - let: preserva o escopo onde foi criado, sendo inacessível para outros escopos

    - const: não sofre alteração após ser declarada (constante) e também preserva o escopo onde foi criado



TEMPLATE STRING - FUNDAMENTOS DO ES6
------------------------------------
- Template string é um recurso para concatenação ou interpolação de codificação javascript com "strings":
    - Apresenta-se como `${}`:
        - let nome = "Gabriel"
          console.log(`Olá, ${nome}. Tudo bem ?`)
        
        - Dados JS permanecem dentro dos ${}, enquanto as "strings" ficam fora
        
    - Diferente das aspas, é possível realizar quebra de linha:
        - let nome = "Gabriel"
          console.log(`Olá, ${nome}. 
          Seja bem-vindo !
          Espero que esteja bem.`)

    - Permite executar funções:
        - function calcular(a, b) {
            return a + b
          }
          console.log(`A soma entre 2+2 é igual a ${calcular(2, 2)}`)



FUNÇÕES - FUNDAMENTOS DO ES6
----------------------------
- Parâmetros "default" são utilizados na assinatura da função:
    - function historia(nome = "Gabriel", time = "SPFC") {
        document.write(`O ${nome} ama o ${time}`)
      }
      historia()   -> Dessa forma é utilizado os parâmetros da assinatura da função

    - function historia(nome, time) {
        document.write(`O ${nome} ama o ${time}`)
      }
      historia("Gabriel", "SPFC")   -> Dessa forma valores dos parâmetros são passados na execução da função

    - function historia(nome = "Gabriel", time = "SPFC") {
        document.write(`O ${nome} ama o ${time}`)
      }
      historia("Tutiara", undefined)   -> Dessa forma o primeiro parâmetro da assinatura da função é sobrescrito e o segundo é mantido


- Arrow function é uma função com a ideia de flecha. Veja a sintaxe:
    - Antigamente era só conhecida como função anônima, ou seja, sem nome:
        - let quadrado = function(x) {
            return x * x
          }
          console.log(quadrado(3))

    - Atualmente a "arrow function", ou também função anônima, aparece da seguinte forma:
        - let quadrado = (x) => {   --> O sinal "=>" retoma a ideia de uma flecha e não é mais necessário o uso da palavra "function"
            return x * x
          }
          console.log(quadrado(3))
        
        - O uso do parenteses se torna opcional quando houver apenas um parâmetro:
          let quadrado = x => {
            return x * x
          }
          console.log(quadrado(3))

    - Outros exemplos:
        - O uso do "return" também se torna opcional quando não houver lógica extensa ou blocos de código:
          let quadrado = x => x * x
          console.log(quadrado(3))

        - O "return" também pode ser substituído em alguns casos:
          let parOuImpar = numero => numero % 2 === 0 ? "par" : "ímpar"
          console.log(parOuImpar(10))



INTRODUÇÃO A ORIENTAÇÃO A OBJETOS - FUNDAMENTOS DO ES6
------------------------------------------------------
- Procedural, estruturado e imperativo:
    - São paradigmas chamados de procedimentos (procedures) para manipulação de dados, sendo divididos em lógico e funcional:
      let a = 10
      let b = 7
      let operador = "multiplicador"
      function calcular(a, b, operador) {
        if(operador === "multiplicador") {
            console.log(a * b)
        }
      }
      calcular(a, b, operador)


- Orientado a objetos:
    - Também são paradigmas estruturados de dados, divididos em concorrente e reativo, porém, com comportamentos diferentes:
      class Calculadora {
        constructor() {
            this.a = 10
            this.b = 7
            this,operador = "multiplicador"
        }
        calcular() {
            if(this.operador === "multiplicador") {
                console.log(this.a * this.b)
            }
        }
      }
      calculadora = new Calculadora()
      calculadora.calcular()

    - Além disso, o paradigma de OO, possui quatro fundamentos:
        - Abstração: é a capacidade de abstrair elementos do mundo real para a programação

        - Encapsulamento: tornam os atributos e métodos mais seguros, além de facilitar a implementação e alteração dos dados e de
          forma reutilizável

        - Herança: colabora para o código ser reutilizável, menos redundante e de fácil manutenção

        - Poliformismo: além de ser reutilizável, auxilia na sobrescrita de métodos 

    - A abstração é composta por:
        - Entidade:
            - Carro
            - Conta bancária

        - Identidade:
            - x = new Carro()
            - y = new ContaBancaria()

        - Características (atributos):
            - Marca, modelo, cor e quantidade de portas
            - Agência, número da conta, saldo e limite

        - Ações (métodos):
            - Ligar, desligar, acelerar e freiar
            - Depositar, sacar e consultar o saldo

        - Uma das diferenças entre da programação OO e a procedural é a quantidade de código escrita, além de vincular as funções ao objeto

    - O encapsulamento pode apresentar dados privados ou públicos:
        - private: utilizado para métodos e atributos, permitindo o acesso somente pelo objeto através de getters e setters

        - protect: utilizado para dados protegidos

        - public: utilizado para métodos e atributos

    - A herança também é conhecida por classe pai, classe mãe, super classe ou classes e subclasses:
        - A ideia da herança é atribuir atributos e métodos que sejam comuns entre classes diferentes:
            - class Animal
            - class Cachorro
            - class Gato
        
        - Para implementar uma super classe é necessário utilizar a palavra "extends":
            - class Cachorro extends Animal {}
            - Dessa forma é possível utilizar atributos e métodos da classe pai

        - Utilização do operador super() para referenciar os dados da super classe:
            - super() só é utilizado em classes que recebem herança e pode utilizar parâmetros, ou seja, se tem "extends" tem super()
          
            - class Cachorro extends Animal {
                constructor() {
                  super()
                  this.nome = "Doguinho"
                }
              }
          
            - Os parâmetros passados pelo constructor e super referenciam dados diferentes:
                - this: representa os atributos da classe
                - constructor(): os parâmetros são variáveis de escopo
                - super(): os parâmetros apontam para o constructor da classe

    - O poliformismo pode sobrescrever os métodos nos métodos filhos:
        - class Passaro extends Animal {
            constructor(bico, cor, tamanho, peso) {
              super(cor, tamanho, peso)
              this.bico = bico
            }
            voar() {
              console.log("Voar")
            }
          }

          class Avestruz extends Passaro {
            constructor() {
              super("Grande", "Cinza", 250, 15000)
            }

            enterrarCabeca() {
              console.log("Enterrar cabeça")
            }

            voar() {
              console.log("Não voa")
            }
          }

          let avestruz = new Avestruz()
          avestruz.enterrarCabeca()
          avestruz.voar()


- Objetos literais:
    - Notação de classe (ES6)

    - Notação de objeto literal ou estático

    - Embora pareçam a mesma coisa, ambos podem ter objetivos diferentes:
        - Utilizar a classe para construir um objeto que instancie vários outros objetos (coleção)

        - Utilizar o literal quando se tratar apenas de um objeto e seu uso é mais comum pela praticidade:
            - Um formulário pode ser enviado para um servidor, os dados são recuperados, cria-se um objeto literal que depois é convertido em JSON,
              esse arquivo é enviado via requisição HTTPS, recebido por um servidor e depois armazenado 
    
    - Modificação e inclusão de dados:
        - let pessoa = {
            nome: "Gabriel",
            idade: 26
          }

        - Para incluir basta recuperar o objeto e criar o novo atributo e seu valor:
            - pessoa.sobreNome = "Godoy"

        - Para modificar basta recuperar o objeto e atribuir um novo valor ao atributo:
            - pessoa.idade = 25


- Objetos únicos:
    - Todo objeto literal pode-se tornar único, ou seja, um objeto perfil pode ser referenciado numa variável pessoa, permitindo que o perfil 
      manipule os atributos de pessoa:
        - let perfil = {
            nome: "Gabriel",
            idade: 26,
            usuario: "ADMIN"
          }

        - let pessoa = perfil


- Funções factory:
    - É um conceito ou padrão não obrigatório, mas que, dependendo do caso, pode auxiliar na resolução de problemas

    - É a combinação da chamada de funções com o retorno de objetos literais, criados de acordo com os parâmetros passados para a função

    - let bicicletaFactory2 = function(marca, cor, aro) {
        //Alguma lógica
        return {
          marca: marca,
          cor: cor,
          aro: aro,
          pedalar() {
            console.log("Pedalando")
          }
        }
      }
      let bicicleta2 = bicicletaFactory2("Velozter", "Vermelha", 26)
      console.log(bicicleta2)



INTRODUÇÃO A PROTOTYPE - FUNDAMENTOS DO ES6
-------------------------------------------
- Object:
    - Todos os objetos em JavaScript descendem de Object e por trás disso existe um conceito conhecido por prototype

    - Todo objeto criado é um herdeiro de Object, dessa forma é possível utilizar métodos e atributos originados dele:
        - Object é um padrão do JS, ao invés de um objeto ele é uma função nativa

        - __proto__: é um atributo utilizado para referenciar um objeto, podendo ser utilizado com o conceito de herança
            - Objetc.prototype
              let animal = { atrib1: "a"}
              let vertebrado = { __proto__: animal, atrib2: "b"}
              let ave = { __proto__: vertebrado, atrib3: "c"}
              console.log(ave.atrib2, vertebrado.atrib1)

        - É possível criar um atributo global a partir de Object.prototype, porém, é necessário muito cuidado ao utilizar esse método:
            - Objetc.prototype.novoAtributo = 50: todos os objetos criados a seguir terão o conteúdo novoAtributo = 50



INTRODUÇÃO A OPERADOR REST/SPREAD - FUNDAMENTOS DO ES6
------------------------------------------------------
- O operador rest/spread é constituído por "..." (retisências). Cada definição depende da situação que é usado:
    - Rest: significa juntar e é muito utilizado no contexto de funções
        - Tem a característica de agrupar valores indefinidos num array

        - function soma(...param) { //Quando o parâmetro de uma função for rest, isso significa que o valor inserido na função retornará um array
            let resultado = 0
            console.log(param)
            param.forEach(valor => resultado += valor)
            return resultado
          }
          console.log(soma(1, 2, 3))

    - Spread: significa espalhar, portanto podemos utiliza-lo em strings, arrays e objetos
        - let frase = "Como utilizar o comando rest/spread"
          console.log(frase)
          console.log(...frase)



DESESTRUTURAÇÃO - FUNDAMENTOS DO ES6
------------------------------------
- Esse estrutura é tão óbvia quanto se parece. Ela é responsável por retirar informações de um conteúdo:
    - Arrays:
        - O valor de cada índice pode ser armazenado numa nova variável: 
            - let frutas = ["Abacaxi", "Banana", "Carambola", "Damasco", "Figo"]
              let [a, b, c, d, e] = frutas

        - Declarar um espaço ignora a posição de um índice:
            - let salgados = ["Bolinho de queijo", "Coxinha", "Esfiha", "Kibe"]
              let [f, , g, h] = salgados

        - Esses fundamentos podem ser aplicados num array dimensional:
            - let doces = [["Beijinho", "Bem-Casado", "Brigadeiro"], ["Canudo", "Torta"]]
              let [, [, i]] = doces

        - É possível realiza-lo através de uma função:
            - function desestruturar([a, b, c, d, e]) {
                console.log(a, b, c, d, e)
              }
            desestruturar(frutas)

        - É possível utilizar o operador rest na desestruturação:
            - let [indice, ...outros] = frutas
              console.log(indice)
              console.log(outros)

        - Declarar valores para índices inexistentes retornará o valor "undefined"

    - Objetos:
        - Para desestruturar, basta selecionar os atributos da sua preferência:
            - let produto = {
                nome: "Notebook",
                preco: 2500,
                mouse: false,
                carregador: true,
                detalhes: {
                  fabricante: "Dell",
                  modelo: undefined
                }
              }
              let {nome, preco} = produto

        - É possível alterar o nome original dos atributos e adicionar um novo atributo:
            - let {mouse: m, carregador: c, teclado = false} = produto

        - É possível acessar atributos cujo valor é um objeto:
            - let {detalhes: {fabricante, modelo}} = produto

        - A desestruturação pode ser feita por uma função:
            - function desestruturar({nome, preco, mouse}) {
                console.log(nome, preco, mouse)
              }
              desestruturar(produto)

        - É possível utilizar o operador rest na desestruturação:
            - let {carregador, ...outros} = produto
              console.log(carregador)
              console.log(outros)

        - Declarar valores para atributos inexistentes retornará o valor "undefined"